dev.off()
## Freezer timepoint 1 and proteins - endpoint
freezer_endpoint = t( sapply(traits, function(trait){
linear_model(wdata = endpoint,
dependent = trait,
independent = "freezer_time_endpoint_thaw1",
covariables =  NA)
}) )
freezer_endpoint_full <- merge(names, freezer_endpoint,  by.x='OlinkID', by.y="row.names")
freezer_endpoint_full <- freezer_endpoint_full[order(freezer_endpoint_full[, "P_lm"]),]
##Combine baseline and endpoint results
freezer_protein_all <- merge(freezer_baseline_full, freezer_endpoint_full, by = "OlinkID")
### Scatter plot for time in freezer with all proteins (baseline)
traits <- freezer_baseline_full$OlinkID
#traits <- colnames(baseline)[28:1499] ## 28:1499
protein_plots <- lapply(traits, function(trait) {
pcol <- RColorBrewer::brewer.pal(3, "Set1")
pdata <- baseline[,c("freezer_time_baseline_thaw1", trait)]
colnames(pdata)[2] <- "pid"
plot <- pdata %>% ggplot(aes_string(x = "freezer_time_baseline_thaw1", y="pid")) +
geom_smooth(method = "lm", formula = y ~ x,
color = "red", fill = 'red') +
geom_point() +
#labs(x = "Time in freezer at baseline (days)", y = "")
theme_bw() +
theme(legend.position = "right") +
labs(x = "Days in freezer", y="Protein levels (NPX)", title = trait)
return(plot)
})
f <- paste0(data_output_dir, "figures/03_freezer_proteins_baseline.pdf")
pdf(f, width=8, height=11)
ggpubr::ggarrange(plotlist = protein_plots, ncol = 3, nrow = 5, common.legend = TRUE, legend = "top")
dev.off()
traits <- freezer_endpoint_full$OlinkID
protein_plots <- lapply(traits, function(trait) {
pcol <- RColorBrewer::brewer.pal(3, "Set1")
pdata <- endpoint[,c("freezer_time_endpoint_thaw1", trait)]
colnames(pdata)[2] <- "pid"
plot <- pdata %>% ggplot(aes_string(x = "freezer_time_endpoint_thaw1", y="pid")) +
geom_smooth(method = "lm", formula = y ~ x,
color = "red", fill = 'red') +
geom_point() +
#labs(x = "Time in freezer at endpoint (days)", y = "")
theme_bw() +
theme(legend.position = "right") +
labs(x = "Days in freezer", y="Protein levels (NPX)", title = trait)
return(plot)
})
f <- paste0(data_output_dir, "figures/03_freezer_proteins_endpoint.pdf")
pdf(f, width=8, height=11)
ggpubr::ggarrange(plotlist = protein_plots, ncol = 3, nrow = 5, common.legend = TRUE, legend = "top")
dev.off()
## T-test comparing baseline and endpoint for all proteins
ttest <- as.data.frame(matrix(nrow = 1472, ncol = 6))
colnames(ttest) <- c("protein", "mean_difference", "Lower95%CI", "Upper95%CI", "Pval", "t")
for (i in 28:1499) {
t <- t.test(endpoint[,i], baseline[,i], paired = TRUE)
ttest[,1] <- colnames(baseline[,28:1499])
ttest[i-27,2] <- t$estimate
ttest[i-27,3] <- t$conf.int[1]
ttest[i-27,4] <- t$conf.int[2]
ttest[i-27,5] <- t$p.value
ttest[i-27,6] <- t$statistic
}
ttestfull <- merge(names, ttest, by.x='OlinkID', by.y="protein")
ttestfull <- merge(names, ttest, by.x='OlinkID', by.y="protein")
ttestfull <- ttestfull[order(ttestful[, "Pval"]),]
View(ttestfull)
ttestfull <- ttestfull[order(ttestfull[, "Pval"]),]
head(ttestfull)
?quantile()
head(baseline$freezer_time_baseline_thaw1)
baseline$decile <- quantile(baseline$freezer_time_baseline_thaw1)
quantile(baseline$freezer_time_baseline_thaw1)
baseline$decile_freezer_time <- ntile(baseline$freezer_time_baseline_thaw1, 10)
head(baseline$decile_freezer_time)
baseline$decile_freezer_time <- as.factor(baseline$decile_freezer_time)
str(baseline$decile_freezer_time)
proteins_baseline <- t(baseline[,c(28:1499)])
dim(proteins_baseline)
head(proteins_baseline)
proteins_baseline <- t(baseline[,c(28:1499, "freezer_time_baseline_thaw1", "decile_freezer_time")])
proteins_baseline <- t(baseline[,c(28:1499)])
quantile_time_in_freezer <- t(baseline[,c"baseline$freezer_time_baseline_thaw1", "decile_freezer_time"])
quantile_time_in_freezer <- t(baseline[, "baseline$freezer_time_baseline_thaw1", "decile_freezer_time"])
quantile_time_in_freezer <- t(baseline[, c("baseline$freezer_time_baseline_thaw1", "decile_freezer_time")])
quantile_time_in_freezer <- baseline[, c("baseline$freezer_time_baseline_thaw1", "decile_freezer_time")])
quantile_time_in_freezer <- baseline[, c("baseline$freezer_time_baseline_thaw1", "decile_freezer_time")]
quantile_time_in_freezer <- t(baseline[, c("freezer_time_baseline_thaw1", "decile_freezer_time")])
str(quantile_time_in_freezer)
head(quantile_time_in_freezer)
proteins_baseline <- baseline[,c(28:1499)]
proteins_baseline <- baseline[,c(28:1499)]
quantile_time_in_freezer <- baseline[, c("freezer_time_baseline_thaw1", "decile_freezer_time")]
proteins_baseline_quantile <- cbind(quantile_time_in_freezer, proteins_baseline)
head(proteins_baseline_quantile)
proteins_baseline <- baseline[,c(28:1499)]
quantile_time_in_freezer <- baseline[, c("freezer_time_baseline_thaw1", "decile_freezer_time")]
View(quantile_time_in_freezer)
proteins_baseline_quantile <- as.data.frame(cbind(quantile_time_in_freezer, proteins_baseline))
View(proteins_baseline_quantile)
proteins_baseline_quantile <- t(proteins_baseline_quantile)
View(proteins_baseline)
View(proteins_baseline_quantile)
proteins_baseline_quantile <- as.data.frame(cbind(quantile_time_in_freezer, proteins_baseline))
View(proteins_baseline_quantile)
w <- which(proteins_baseline_quantile$decile_freezer_time == 1)
protein_quant_1 <- proteins_baseline_quantile[w,]
View(protein_quant_1)
proteins_baseline_quantile <- as.data.frame(cbind( proteins_baseline, proteins_baseline_quantile))
w <- which(proteins_baseline_quantile$decile_freezer_time == 1)
w <- which(proteins_baseline_quantile$decile_freezer_time == 1)
protein_quant_1 <- t(proteins_baseline_quantile[w,])
View(protein_quant_1)
proteins_baseline_quantile <- as.data.frame(cbind(quantile_time_in_freezer, proteins_baseline))
variance=apply(protein_quant_1[,c(3:1474)], 2, function(x){
a=sd(x)/sqrt(length(x))
out=a
return(out)
})
w <- which(proteins_baseline_quantile$decile_freezer_time == 1)
w <- which(proteins_baseline_quantile$decile_freezer_time == 1)
protein_quant_1 <- proteins_baseline_quantile[w,]
variance=apply(protein_quant_1[,c(3:1474)], 2, function(x){
a=sd(x)/sqrt(length(x))
out=a
return(out)
})
w <- which(proteins_baseline_quantile$decile_freezer_time == 1)
protein_quant_1 <- proteins_baseline_quantile[w,]
variance=apply(protein_quant_1[,c(3:1474)], 2, function(x){
a=sd(x)/sqrt(length(x))
out=a
return(out)
})
w <- which(proteins_baseline_quantile$decile_freezer_time == 2)
protein_quant_2 <- proteins_baseline_quantile[w,]
variance2=apply(protein_quant_2[,c(3:1474)], 2, function(x){
a=sd(x)/sqrt(length(x))
out=a
return(out)
})
w <- which(proteins_baseline_quantile$decile_freezer_time == 3)
protein_quant_3 <- proteins_baseline_quantile[w,]
variance3=apply(protein_quant_3[,c(3:1474)], 2, function(x){
a=sd(x)/sqrt(length(x))
out=a
return(out)
})
w <- which(proteins_baseline_quantile$decile_freezer_time == 4)
protein_quant_4 <- proteins_baseline_quantile[w,]
variance4=apply(protein_quant_4[,c(3:1474)], 2, function(x){
a=sd(x)/sqrt(length(x))
out=a
return(out)
})
w <- which(proteins_baseline_quantile$decile_freezer_time == 5)
protein_quant_5 <- proteins_baseline_quantile[w,]
variance5=apply(protein_quant_5[,c(3:1474)], 2, function(x){
a=sd(x)/sqrt(length(x))
out=a
return(out)
})
w <- which(proteins_baseline_quantile$decile_freezer_time == 6)
protein_quant_6 <- proteins_baseline_quantile[w,]
variance6=apply(protein_quant_6[,c(3:1474)], 2, function(x){
a=sd(x)/sqrt(length(x))
out=a
return(out)
})
w <- which(proteins_baseline_quantile$decile_freezer_time == 7)
protein_quant_7 <- proteins_baseline_quantile[w,]
variance7=apply(protein_quant_7[,c(3:1474)], 2, function(x){
a=sd(x)/sqrt(length(x))
out=a
return(out)
})
w <- which(proteins_baseline_quantile$decile_freezer_time == 8)
protein_quant_8 <- proteins_baseline_quantile[w,]
variance8=apply(protein_quant_8[,c(3:1474)], 2, function(x){
a=sd(x)/sqrt(length(x))
out=a
return(out)
})
w <- which(proteins_baseline_quantile$decile_freezer_time == 9)
protein_quant_9 <- proteins_baseline_quantile[w,]
variance9=apply(protein_quant_9[,c(3:1474)], 2, function(x){
a=sd(x)/sqrt(length(x))
out=a
return(out)
})
w <- which(proteins_baseline_quantile$decile_freezer_time == 10)
protein_quant_10 <- proteins_baseline_quantile[w,]
variance10=apply(protein_quant_10[,c(3:1474)], 2, function(x){
a=sd(x)/sqrt(length(x))
out=a
return(out)
})
head(variance)
w <- which(proteins_baseline_quantile$decile_freezer_time == 3)
protein_quant_3 <- proteins_baseline_quantile[w,]
variance3=apply(protein_quant_3[,c(3:1474)], 2, function(x){
a=sd(x)/sqrt(length(x))
b = 1
out = cbind(b, a)
out=a
return(out)
})
variances <- rbind(variance, variance2, variance3, variance4, variance5, variance6, variance7, variance8, variance9, variance10)
str(variances)
head(variances)
View(variances)
variances <- cbind(variance, variance2, variance3, variance4, variance5, variance6, variance7, variance8, variance9, variance10)
View(variances)
colnames(variances) <- c(1:10)
variances <- rbind(variance, variance2, variance3, variance4, variance5, variance6, variance7, variance8, variance9, variance10)
View(variances)
variances <- cbind(variance, variance2, variance3, variance4, variance5, variance6, variance7, variance8, variance9, variance10)
colnames(variances) <- c(1:10)
View(variances)
variances_long <- gather(variances, quantile, measurement, 1:10, factor_key=TRUE)
variances <- as.data.frame(variances)
variances_long <- gather(variances, quantile, measurement, 1:10, factor_key=TRUE)
View(variances_long)
ggplot(variances_long, aes(x=as.factor(quantile, y=measurement))) +
geom_boxplot(fill="slateblue", alpha=0.2) +
xlab("cyl")
ggplot(variances_long, aes(x=quantile, y=measurement)) +
geom_boxplot(fill="slateblue", alpha=0.2) +
xlab("cyl")
ggplot(variances_long, aes(x="quantile", y="measurement")) +
geom_boxplot(fill="slateblue", alpha=0.2) +
xlab("Quantile of time in freezer") + ylab("Standard error of the mean of protein at baseline")
ggplot(variances_long, aes(x="quantile", y="measurement")) +
geom_boxplot(fill="slateblue", alpha=0.2) +
xlab("Quantile of time in freezer")
ggplot(variances_long, aes(x="quantile", y="measurement")) +
geom_boxplot(fill="slateblue", alpha=0.2) +
xlab("Quantile")
ggplot(variances_long, aes(x='quantile', y="measurement")) +
geom_boxplot(fill="slateblue", alpha=0.2) +
xlab("cyl")
ggplot(variances_long, aes(x=quantile, y="measurement")) +
geom_boxplot(fill="slateblue", alpha=0.2) +
xlab("cyl")
ggplot(variances_long, aes(x=quantile, y=measurement)) +
geom_boxplot(fill="slateblue", alpha=0.2) +
xlab("cyl")
ggplot(variances_long, aes(x=quantile, y=measurement)) +
geom_boxplot(fill="slateblue", alpha=0.2) +
xlab("Quantile of time in freezer") + ylab("Standard error of the mean protein levels (NPX)")
w <- which(proteins_baseline_quantile$decile_freezer_time == 1)
protein_quant_1 <- proteins_baseline_quantile[w,]
variance=apply(protein_quant_1[,c(3:1474)], 2, function(x){
a=sd(x)
out=a
return(out)
})
w <- which(proteins_baseline_quantile$decile_freezer_time == 2)
protein_quant_2 <- proteins_baseline_quantile[w,]
variance2=apply(protein_quant_2[,c(3:1474)], 2, function(x){
a=sd(x)
out=a
return(out)
})
w <- which(proteins_baseline_quantile$decile_freezer_time == 3)
protein_quant_3 <- proteins_baseline_quantile[w,]
variance3=apply(protein_quant_3[,c(3:1474)], 2, function(x){
a=sd(x)
out=a
return(out)
})
w <- which(proteins_baseline_quantile$decile_freezer_time == 4)
protein_quant_4 <- proteins_baseline_quantile[w,]
variance4=apply(protein_quant_4[,c(3:1474)], 2, function(x){
a=sd(x)
out=a
return(out)
})
w <- which(proteins_baseline_quantile$decile_freezer_time == 5)
protein_quant_5 <- proteins_baseline_quantile[w,]
variance5=apply(protein_quant_5[,c(3:1474)], 2, function(x){
a=sd(x)
out=a
return(out)
})
w <- which(proteins_baseline_quantile$decile_freezer_time == 6)
protein_quant_6 <- proteins_baseline_quantile[w,]
variance6=apply(protein_quant_6[,c(3:1474)], 2, function(x){
a=sd(x)
out=a
return(out)
})
w <- which(proteins_baseline_quantile$decile_freezer_time == 7)
protein_quant_7 <- proteins_baseline_quantile[w,]
variance7=apply(protein_quant_7[,c(3:1474)], 2, function(x){
a=sd(x)
out=a
return(out)
})
w <- which(proteins_baseline_quantile$decile_freezer_time == 8)
protein_quant_8 <- proteins_baseline_quantile[w,]
variance8=apply(protein_quant_8[,c(3:1474)], 2, function(x){
a=sd(x)
out=a
return(out)
})
w <- which(proteins_baseline_quantile$decile_freezer_time == 9)
protein_quant_9 <- proteins_baseline_quantile[w,]
variance9=apply(protein_quant_9[,c(3:1474)], 2, function(x){
a=sd(x)
out=a
return(out)
})
w <- which(proteins_baseline_quantile$decile_freezer_time == 10)
protein_quant_10 <- proteins_baseline_quantile[w,]
variance10=apply(protein_quant_10[,c(3:1474)], 2, function(x){
a=sd(x)
out=a
return(out)
})
variances <- cbind(variance, variance2, variance3, variance4, variance5, variance6, variance7, variance8, variance9, variance10)
colnames(variances) <- c(1:10)
variances <- as.data.frame(variances)
variances_long <- gather(variances, quantile, measurement, 1:10, factor_key=TRUE)
ggplot(variances_long, aes(x=quantile, y=measurement)) +
geom_boxplot(fill="slateblue", alpha=0.2) +
xlab("Quantile of time in freezer") + ylab("Standard deviation of protein levels (NPX)")
ggplot(variances_long, aes(x=quantile, y=measurement)) +
geom_boxplot(fill="slateblue", alpha=0.2) +
xlab("Decile of time in freezer") + ylab("Standard deviation of protein levels (NPX)")
ggplot(variances_long, aes(x=quantile, y=measurement)) +
geom_boxplot(fill="slateblue", alpha=0.2) +
xlab("Decile of time in freezer") + ylab("Standard deviation of protein levels at baseline (NPX)")
View(variances_long)
library(readxl)
library(tidyr)
library(psych)
library(dplyr)
#source("http://news.mrdwab.com/install_github.R")
#install_github("mrdwab/SOfun")
library(SOfun)
library(lme4)
library(nlme)
#remotes::install_github(repo ='Olink-Proteomics/OlinkRPackage/OlinkAnalyze', ref = "main", build_vignettes = TRUE)
library(OlinkAnalyze)
library(ggplot2)
library(tidyverse)
library(gtools)
library(qqman)
## Set working directory
# read in parameter file (specified on command line)
source("parameter_files/parameters_for_r.R")
# move to working directory
setwd(working_dir)
### Read in pivot wider dataset with additional cols (not just NPX) (these can be merged in later if necessary)
mydatawide <- read.table(paste0(data_intermediate_dir, "olink_data_wide_full.txt"), sep = "\t", header = T)
### Read in metaboprep output and format to give SampleID in first row followed by protein levels
qcdata <- read.table(paste0(data_intermediate_dir, "metaboprep_release_2021_10_14/filtered_data/LG_bybandsleeve_2021_10_14_Filtered_metabolite_data.txt"), sep = "\t", header=T)
IDs <- as.matrix(rownames(qcdata))
rownames(qcdata) <- NULL
qcdata <- cbind(IDs, qcdata)
names(qcdata)[1] <- "SampleID"
## Read in basic phenotype variables
phenotypes <- read.csv(paste0(prot_input_dir, "/clinical/BBS-2021-09-06_taunton125_analysis_extract_2021-11-15.csv"))
phenotypes$sample_id <- tolower(phenotypes$sample_id)
phenotypes$sample_id <- gsub("-", "", phenotypes$sample_id )
## Merge
mydata <- merge(phenotypes, qcdata, by.x = "sample_id", by.y = "SampleID", all.y = TRUE)
## Read in protein names to identify proteins from Olink IDs
olinknames <- read_excel(paste0(prot_input_dir, "/olink_download_v2/20202265_Timpson_NPX_2021-04-27_V2.xlsx"))
OlinkIDs <- olinknames %>%
group_by(OlinkID) %>%
filter(Index == min(Index)) %>%
distinct
OlinkIDs <- OlinkIDs[!duplicated(OlinkIDs$OlinkID), ]
names <- OlinkIDs[, c("OlinkID", "UniProt", "Assay")]
names$OlinkID <- tolower(names$OlinkID)
names <- as.data.frame(names)
#boxplot of weight
mydata$Visit.Identifier <- factor(mydata$Visit.Identifier,
levels = c('Baseline','36 months'),ordered = TRUE)
weightbox <- ggplot(mydata, aes(x=as.factor(Visit.Identifier), y=Patient.Weight)) +
geom_boxplot(fill="slateblue", alpha=0.2) +
xlab("Timepoint") + ylab("Weight (kgs)")
## Paired ttest to compare weight - get same order
weight <- t.test(na.omit( endpoint$Patient.Weight, baseline$Patient.Weight, paired = TRUE))
## Make study ID factor (this ID identifies individual, combine with time point info to determine
## for each individual which is baseline and 36 months)
mydata <- mydata[order(mydata[, "Study.Identifier"]),]
mydata$Study.Identifier <- as.factor(mydata$Study.Identifier)
## Change visit identifier to numeric
mydata$Visit.Identifier <- as.character(mydata$Visit.Identifer)
mydata$Visit.Identifier <- as.numeric(mydata$Visit.Identifier)
### Compare protein across timepoints - protein ~ time + subject
lmerfun <-  lmer(formula = NPX_OID20837 ~ timepoint + timepoint * (1|study_id), data=mydata)
lmerfunx <-  lmer(formula = NPX_OID20245 ~ timepoint + timepoint * (1|study_id), data=mydata)
## Keep IDs mentioned twice
length(unique(mydata[,"Study.Identifier"]))
w <- which(mydata$Study.Identifier == "TAU0244")
mydata <- mydata[-w,]
w <- which(mydata$Study.Identifier == "TAU0234")
mydata <- mydata[-w,]
## Separate dataframes of timepoints
w <- which(mydata$Visit.Identifier == 1)
baseline <- mydata[w,]
w <- which(mydata$Visit.Identifier == 2)
endpoint <- mydata[w,]
View(baseline)
View(endpoint)
### Plate associations with protein levels - test one protein
str(mydata$olink_Plate.ID)
mydata$olink_Plate.ID <- as.factor(mydata$olink_Plate.ID)
baseline$olink_Plate.ID <- as.factor(baseline$olink_Plate.ID)
endpoint$olink_Plate.ID <- as.factor(endpoint$olink_Plate.ID)
platebaseline <- summary(lm(baseline$oid20245 ~ baseline$olink_Plate.ID))
plateendpoint <- summary(lm(endpoint$oid20245 ~ endpoint$olink_Plate.ID))
## Make dates in correct format
str(baseline$Date.research.bloods.taken)
baseline$Date.research.bloods.taken <- as.Date(baseline$Date.research.bloods.taken)
str(endpoint$Date.bloods.taken)
endpoint$Date.bloods.taken <- as.Date(endpoint$Date.bloods.taken)
## Set date of first and second thaws
baseline$baseline_thaw1 <- as.Date("2021-02-08")
baseline$baseline_thaw2 <- as.Date("2021-04-01")
endpoint$baseline_thaw1 <- as.Date("2021-02-08")
endpoint$baseline_thaw2 <- as.Date("2021-04-01")
## Create variable for time to first thaw for baseline and endpoint samples
baseline$freezer_time_baseline_thaw1 <- as.numeric(abs(baseline$Date.research.bloods.taken - baseline$baseline_thaw1))
endpoint$freezer_time_endpoint_thaw1 <- as.numeric(abs(endpoint$Date.bloods.taken - endpoint$baseline_thaw1))
## Create variable for time to second thaw
baseline$freezer_time_baseline_thaw2 <- as.numeric(abs(baseline$Date.research.bloods.taken - baseline$baseline_thaw2))
## Time from first appointment to second
baseline$days_between_appointments <- as.numeric(abs(baseline$Date.research.bloods.taken - endpoint$Date.bloods.taken))
hist(baseline$days_between_appointments)
## Does time in freezer associate with protein levels?
linear_model <- function(wdata, dependent, independent, covariables) {
##############################
### 1. Define Model Data Frame
##############################
if(is.na(covariables[1])){
model_variables = c( dependent, independent )
} else {
model_variables = c( dependent, covariables, independent)
}
mod_data = wdata[, c(model_variables)]
##############################
### 2. Perform Linear Model
##############################
if( is.na( covariables[1] ) ){
form = formula(paste0(dependent ," ~ ", independent ))
} else {
form = formula(paste0(dependent ," ~ ", paste0(covariables, collapse = " + ") ," + ", independent ))
}
lm_mod <- lm(form, data = mod_data)
#################
## 3. summary stats
#################
s = summary(lm_mod)
## sample size
n = length(residuals(s)); names(n) = "n_lm"
## Adjusted R-squared, to compare between models with a different number of predictors
rsq = s$adj.r.squared; names(rsq) = "rsq_adj_lm"
## Dependent Variable effect estimates
beta = s$coefficients[2,1]; names(beta) = "beta_lm"
se = s$coefficients[2,2]; names(se) = "se_lm"
pval = s$coefficients[2,4]; names(pval) = "P_lm"
lm_results = c(n, rsq, beta, se, pval)
return(lm_results)
}
##  test function with one protein
linear_model(wdata = baseline, dependent = "oid20837", independent = "freezer_time_baseline_thaw1", covariables =  NA)
## Run all protein columns baseline
columns_with_protein_data = 28:1499
traits = colnames(baseline)[columns_with_protein_data]
## Freezer timepoint 1 and proteins - baseline
freezer_baseline = t( sapply(traits, function(trait){
linear_model(wdata = baseline,
dependent = trait,
independent = "freezer_time_baseline_thaw1",
covariables =  NA)
}) )
freezer_baseline_full <- merge(names, freezer_baseline,  by.x='OlinkID', by.y="row.names")
freezer_baseline_full <- freezer_baseline_full[order(freezer_baseline_full[, "lm_P"]),]
View(freezer_baseline_full)
View(freezer_baseline_2000)
View(freezer_baseline_full)
freezer_baseline_full <- freezer_baseline_full[order(freezer_baseline_full[, "P_lm"]),]
library(readxl)
library(tidyr)
library(kableExtra)
library(knitr)
abbreviations <- read_xlsx("figure/Abbreviations/Abbreviations.xlsx")
abbreviations <- abbreviations[order(abbreviations$Abbreviation),]
kinitr::kable(abbreviations, longtable = T, booktabs = T, format = "latex", escape = F,
caption = "Full list of abbreviations") %>%
kable_classic_2(full_width = F) %>%
kable_styling(full_width = TRUE) %>%
column_spec(1, width = "3cm")
library(readxl)
library(tidyr)
library(kableExtra)
install.packages("knitr")
library(knitr)
abbreviations <- read_xlsx("figure/Abbreviations/Abbreviations.xlsx")
abbreviations <- abbreviations[order(abbreviations$Abbreviation),]
kinitr::kable(abbreviations, longtable = T, booktabs = T, format = "latex", escape = F,
caption = "Full list of abbreviations") %>%
kable_classic_2(full_width = F) %>%
kable_styling(full_width = TRUE) %>%
column_spec(1, width = "3cm")
setwd("~/OneDrive - University of Bristol/PhD/Main project/Thesis/index")
